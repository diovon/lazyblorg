# -*- mode: org; coding: utf-8; -*-
# Time-stamp: <2017-02-12 16:00:32 vk>

* header information                                               :noexport:
:PROPERTIES:
:CREATED:  [2013-01-08 Tue 14:24]
:END:

#+TITLE:     lazyblorg development informations and issue tracker
#+AUTHOR:    Karl Voit
#+EMAIL:     tools@Karl-Voit.at
#+DATE:
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:t \n:nil ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:
#+LINK_HOME:
#+XSLT:

#+STARTUP: hidestars

#+STARTUP: overview   (or: showall, content, showeverything)
http://orgmode.org/org.html#Visibility-cycling

#+TODO: TODO(t) NEXT(n) STARTED(s) WAITING(w@/!) SOMEDAY(S!) | DONE(d!/!) CANCELLED(c@/!)
http://orgmode.org/org.html#Per_002dfile-keywords

#+TAGS: { wish(w) bug(b) userstory(u) inconsistency(i) question(q) architecture(a) tests(t) }
http://orgmode.org/org.html#Setting-tags


* Issue Tracking                                                     :issues:
:PROPERTIES:
:VISIBILITY: children
:CREATED:  [2013-01-08 Tue 14:26]
:END:

NOTE: Some issues that are marked as DONE or CANCELED are moved to the
corresponding archive-file "lazyblorg.org_archive".

** DONE spike: time-ordered-index data structure              :architecture:
CLOSED: [2013-08-20 Tue 15:02]
:PROPERTIES:
:CREATED:  [2013-08-20 Tue 14:57]
:END:
:LOGBOOK:
- State "DONE"       from "STARTED"    [2013-08-20 Tue 15:02]
:END:

- problem:
  - keep a sorted list of elements like [ [<time-stamp>,<id>], [...] ]

- http://wiki.python.org/moin/HowTo/Sorting/
  - sorting by index or named attribute!

Sorting by age using tuples:
#+BEGIN_SRC python
>>> student_tuples = [
        ('john', 'A', 15),
        ('jane', 'B', 12),
        ('dave', 'B', 10),
]
>>> sorted(student_tuples, key=lambda student: student[2])   # sort by age
[('dave', 'B', 10), ('jane', 'B', 12), ('john', 'A', 15)]
#+END_SRC

Sorting by attribute of a class:
#+BEGIN_SRC python
>>> class Student:
        def __init__(self, name, grade, age):
                self.name = name
                self.grade = grade
                self.age = age
        def __repr__(self):
                return repr((self.name, self.grade, self.age))

>>> student_objects = [
        Student('john', 'A', 15),
        Student('jane', 'B', 12),
        Student('dave', 'B', 10),
]
>>> sorted(student_objects, key=lambda student: student.age)   # sort by age
[('dave', 'B', 10), ('jane', 'B', 12), ('john', 'A', 15)]
#+END_SRC

** DONE Decision algorithm for generating entries; storage data :architecture:
CLOSED: [2013-08-20 Tue 14:44]
:PROPERTIES:
:CREATED:  [2012-11-06 Tue]
:ID: 2012-11-06-ago-generating
:END:
:LOGBOOK:
- State "DONE"       from "TODO"       [2013-08-20 Tue 14:44]
:END:

| *case* | *ID*      | *created*    | *last_update*   | *checksum*   | *result*                     | *description*                    |
|--------+-----------+--------------+-----------------+--------------+------------------------------+----------------------------------|
|      1 | not found | DC           | DC              | DC           | WARNING                      | blog-entry without ID            |
|      2 | not known | DC           | DC              | DC           | generate; FEED                | 1st time generation              |
|      3 | known     | not found    | DC              | DC           | WARNING                      | blog-entry without CREATED       |
|      4 | known     | not matching | DC              | DC           | ERROR                        | CREATED should not change        |
|      5 | known     | matching     | same as CREATED | matching     |                              | not changed since 1st generation |
|      6 | known     | matching     | unchanged       | matching     |                              | not changed since last update    |
|      7 | known     | matching     | unchanged       | not matching | generate; noFEED; noIncrement | silent update                    |
|      8 | known     | matching     | changed         | not matching | generate; FEED; Increment     | normal Update                    |

- for each ORGMODE-file
  - for each entry tagged with BLOGTAG AND in DONE state
    - if no :ID: found
      - case1
      - warning
      - continue with next heading
    - if ID not known
      - case2
      - generate FEED
      - generate HTML
      - continue with next heading
    - if CREATED not found
      - case3
      - warning
      - continue with next heading
    - if CREATED not matching previous run
      - case4
      - error-msg
      - continue with next heading
    - elseif CREATED and CHECKSUM matches
      - case5 or case6
      - debug: entry has not changed
    - elseif CREATED matches and CHECKSUM not matching
      - if LASTUPDATE changed
        - case8
        - increment update-number
        - generate FEED
        - generate HTML
      - else (if LASTUPDATE unchanged)
        - case7
        - generate HTML

- "FEED" means:
  - update time-ordered-index

- persistence storage has to hold (at least):
  - per blog entry:
    - ID
    - CREATED time-stamp
    - LAST_UPDATE time-stamp
    - checksum
  - time-ordered-index (OR: re-generate out of blog data)
    - LAST_UPDATE
    - ID

*** DONE [#A] finalize lazyblorg-algorithm sketch
CLOSED: [2012-11-10 Sat 18:10] DEADLINE: <2012-11-10 Sat>
:PROPERTIES:
:CREATED:  [2012-11-07 Wed 21:23]
:END:
:LOGBOOK:
- State "DONE"       from "NEXT"       [2012-11-10 Sat 18:10]
:END:

** DONE paper: sketch main page                                  :userstory:
CLOSED: [2014-02-01 Sat 15:02]
:PROPERTIES:
:CREATED:  [2013-02-14 Thu 16:39]
:END:
:LOGBOOK:
- State "DONE"       from "STARTED"    [2014-02-01 Sat 15:02]
:END:

- top: public voit banner (as usual)
- main content: 7 most recent blog entries
  - only up to first HR or heading
    - if HR/heading is found, add "read while article..." as link below
- side-bar
  1. "about" (persistent page)
     - about this blog
       - SW being used
       - how to follow
       - link to FEED
     - about Karl Voit
       - Twitter
       - github
  2. "tags" (persistent page)
     - explaining why I am using tags
     - auto-tags
     - overview on tags
  3. 2011, 2012, 2013, ...: yearly overview pages
     - of all years that contain blog articles
  4. "follow me": get updates via FEED (persistent page)
     - explaining the methods I provide

Defining the content in a special template heading:

- main page as "** Mainpage"
------------
- side-bar as "*** Sidebar"
  - list of elements
  - HR as separator (as shown above)
** DONE paper: sketch overview pages                             :userstory:
CLOSED: [2014-02-01 Sat 15:03]
:PROPERTIES:
:CREATED:  [2014-02-01 Sat 15:02]
:END:
:LOGBOOK:
- State "DONE"       from "STARTED"    [2014-02-01 Sat 15:03]
:END:

- see paper from [2014-01-31 Fri]

** DONE implement method(s) to get URL of an blogdata id      :architecture:
CLOSED: [2014-03-01 Sat 20:10]
:PROPERTIES:
:CREATED:  [2013-10-19 Sat 19:16]
:END:
:LOGBOOK:
- State "DONE"       from "NEXT"       [2014-03-01 Sat 20:10]
:END:

- [X] get absolute/relative URL of any entry ID

  - (Pdb) self._target_path_for_id_with_targetdir_and_prefixdir(entry['id'])
    - u'testdata/2del/blog/2013/08/21/lazyblorg-templates'
    - (Pdb) self.targetdir  ->   'testdata/2del'
    - self.prefix_dir ->  blog

  - (Pdb) self._target_path_for_id_without_targetdir_and_prefixdir(entry['id'])
    - u'2013/08/21/lazyblorg-templates'

** DONE tag cloud                                                                         :userstory:
CLOSED: [2017-01-02 Mon 16:55]
:PROPERTIES:
:CREATED:  [2012-11-05 Mon 10:57]
:END:
:LOGBOOK:
- State "DONE"       from "NEXT"       [2017-01-02 Mon 16:55]
:END:

- tag cloud for getting a quick overview on the blog itself
- a list of all tags on front page with link to tag-descriptions
- [X] each tag gets a tag-description page
  - what I mean by this tag with examples
  - link to feed for this tag
  - link to a list of blog entries for this tag

- see also id:2012-11-11-autotags

- research of tag cloud libs
  - [X] http://sujitpal.blogspot.co.at/2007/04/building-tag-cloud-with-python.html
    - looks boring: just a list of text with different font sizes
  - [X] http://stackoverflow.com/questions/3180779/html-tag-cloud-in-python
    - self-made: [[id:2017-01-02-html-tag-cloud][see below]]

- Idea:
  - size of tag :: number of occurrences
  - contrast of tag colour :: last menioning of tag
    - light gray: every tag that was not mentioned in the recent two years
    - several steps of grayiness/black from two years until now (or
      most recent blog article)
    - [ ] need for a legend?

#+BEGIN_SRC python :results output
COUNT_SIZES = range(1, 7) # requires 0..6 size-X definitions in CSS
AGE_RANGES = [31, 31*3, 31*6, 365, 365*3] # requires 0..5 age-X definitions

TAGS = [
    ['python', 28059, 3],
    ['html', 19160, 365],
    ['cloud', 40, 100],
    ['one_day', 1000, 1],
    ['one_month_31', 1000, 31],
    ['three_months_101', 1000, 101],
    ['age_350', 1000, 350],
    ['age_500', 1000, 500],
    ['age_550', 1000, 550],
    ['age_5000', 1000, 5000],
    ['two_years_700', 55, 700]
]

COUNT_MAX = max([x[1] for x in TAGS]) # Needed to calculate the steps for the font-size
COUNT_STEP = COUNT_MAX / len(COUNT_SIZES)

for currenttag in sorted(TAGS):
    tag = currenttag[0]
    count = currenttag[1]
    age = currenttag[2]

    css_size = count / COUNT_STEP

    css_age = 0
    for age_range in AGE_RANGES:
        if age < age_range:
            break
        css_age += 1

    print '<a href="%s/" class="usertag tagcloud-size-%s tagcloud-age-%s">%s</a>\n' % (tag, css_size, css_age, tag),
#+END_SRC

#+RESULTS:
#+begin_example
<a href="age_350/" class="usertag tagcloud-size-0 tagcloud-age-3">age_350</a>
<a href="age_500/" class="usertag tagcloud-size-0 tagcloud-age-4">age_500</a>
<a href="age_5000/" class="usertag tagcloud-size-0 tagcloud-age-5">age_5000</a>
<a href="age_550/" class="usertag tagcloud-size-0 tagcloud-age-4">age_550</a>
<a href="cloud/" class="usertag tagcloud-size-0 tagcloud-age-2">cloud</a>
<a href="html/" class="usertag tagcloud-size-4 tagcloud-age-4">html</a>
<a href="one_day/" class="usertag tagcloud-size-0 tagcloud-age-0">one_day</a>
<a href="one_month_31/" class="usertag tagcloud-size-0 tagcloud-age-1">one_month_31</a>
<a href="python/" class="usertag tagcloud-size-6 tagcloud-age-0">python</a>
<a href="three_months_101/" class="usertag tagcloud-size-0 tagcloud-age-2">three_months_101</a>
<a href="two_years_700/" class="usertag tagcloud-size-0 tagcloud-age-4">two_years_700</a>
#+end_example

*** HTML-tag-cloud according to http://stackoverflow.com/questions/3180779/html-tag-cloud-in-python
:PROPERTIES:
:ID: 2017-01-02-html-tag-cloud
:CREATED:  [2017-01-02 Mon 16:56]
:END:

Define font-sizes in your css-file. Use classes from

#+BEGIN_SRC css
size-0{
   font-size: 11px;
}

size-1{
   font-size: 12px;
}

[...]

size-6{}
#+END_SRC

etc. up to the font-size you need.
And then simply use this snippet:

#+BEGIN_SRC python :results output
CSS_SIZES = range(1, 7) # 1,2...6 for use in your css-file size-1, size-2, etc.

TAGS = {
    'python' : 28059,
    'html' : 19160,
    'tag-cloud' : 40,
}

MAX = max(TAGS.values()) # Needed to calculate the steps for the font-size
STEP = MAX / len(CSS_SIZES)

for tag, count in TAGS.items():
    css = count / STEP
    print '<a href="%s" class="size-%s">%s</a>\n' % (tag, css, tag),
#+END_SRC

#+RESULTS:
: <a href="python" class="size-6">python</a>
: <a href="html" class="size-4">html</a>
: <a href="tag-cloud" class="size-0">tag-cloud</a>

That's all. No need for a library ;-)
** NEXT generate tagtrees of level 2 (and more)
:PROPERTIES:
:CREATED:  [2017-02-12 Sun 10:55]
:END:

- current situation
  - DOMAIN/tags/tag1
  - DOMAIN/tags/tag2
  - DOMAIN/tags/tag3
- this feature provides:
  - DOMAIN/tags/tag1/tag2
  - DOMAIN/tags/tag1/tag3
  - DOMAIN/tags/tag2/tag1
  - DOMAIN/tags/tag3/tag1
  - ... when there are:
    - articles tagged with tag1, tag2, and tag3
    - no articles tagged with tag2 and tag3 combined

- [ ] set level of depth in config.py; default = 1
** NEXT blog-format.org: explain all replacement strings at top                           :userstory:
   :PROPERTIES:
   :CREATED:  [2016-11-16 Wed 23:23]
   :END:
** NEXT [#C] remove orgmode-id from entry-page-header                                           :bug:
:PROPERTIES:
:CREATED:  [2017-01-03 Tue 12:11]
:END:

It holds a random ID. No need for the orgmode-id on the entry page.

** NEXT fix generating publishing time for empty tag pages                                      :bug:
   :PROPERTIES:
   :CREATED:  [2016-11-13 Sun 20:52]
   :END:
** NEXT orgparser: refactor so that spaces before drawer lines are OK                    :userstory:
:PROPERTIES:
:CREATED:  [2016-11-15 Tue 14:12]
:END:
** NEXT link autotag pages                                                                :userstory:
   :PROPERTIES:
   :CREATED:  [2016-11-06 Sun 19:47]
   :END:

"language:english" should point to tag page of "language" (and not "language:english")

** NEXT README: write «How to upgrade lazyblorg»
:PROPERTIES:
:CREATED:  [2016-11-05 Sat 10:18]
:END:
** NEXT document: what elements are rendered/converted via pypandoc?
:PROPERTIES:
:CREATED:  [2015-06-23 Tue 12:13]
:END:
:LOGBOOK:
- Not scheduled, was "[2016-08-06 Sat]" on [2016-11-18 Fri 20:22]
- Rescheduled from "[2016-02-08 Mon]" on [2016-07-23 Sat 12:20]
:END:

- id:implemented-org-elements

** NEXT refractor blog data Metadata to single dict

- why
  - list of data strutures is getting longer and longer
  - adding a new data structure is getting tedious: unit tests, ...
  - simplification?
- data structures to add to single data structure-dict:
  - blog_data
  - metadata
  - FIXXME: more?

** NEXT tag pages: Atom-feed for each tag                                                :userstory:
:PROPERTIES:
:CREATED:  [2016-11-01 Tue 11:53]
:END:
** DONE analyze and steal CSS for columns from [[http://endlessparentheses.com/how-i-blog-one-year-of-posts-in-a-single-org-file.html][URL]]                                    :architecture:
CLOSED: [2015-06-27 Sat 19:06] SCHEDULED: <2015-06-27 Sat>
:PROPERTIES:
:CREATED:  [2015-06-27 Sat 12:20]
:END:
:LOGBOOK:
- State "DONE"       from "NEXT"       [2015-06-27 Sat 19:06]
:END:

- http://endlessparentheses.com/endless.css
  - interesting part is marked with ~/* Responsiveness */~
    - reponsive design: different settings with different height/width:
      #+BEGIN_EXAMPLE
      /* Responsiveness */
      @media (max-height: 34rem) {
          .left-sidebar-ad {display:none;}
          .se-flair {display:none;}
      }
      @media (min-height: 34.1rem) {
          .left-sidebar-ad {display:initial;}
          .se-flair {display:initial;}
      }

      @media (max-width: 62.2rem) {
          .post-ad-mobile {
              display: initial;
              width: 320px;
              height: 100px;
              margin-left: auto;
              margin-right: auto;
          }

          .post-ad {display: none;}
          .left-sidebar-ad {display:none;}

          .masthead-links {
              margin-top: .3rem;
              margin-left: 0;
              margin-right: 0;
          }
          .masthead-links li {
              margin:0;
              margin-bottom:.3rem;
              text-align: center;
              font-size:100%;
              width:32%;
              display:none;
          }
          /* Only 3 links fit in mobile. */
          .masthead-links li:nth-child(1),
          .masthead-links li:nth-child(2),
          .masthead-links li:nth-child(3) {
              display:inline-block;
          }

          .pagination {
              width: 99%;
          }
      }
      @media (min-width: 62.3rem) {

          .container {
              /* overflow:hidden; */
              max-width: 52rem;
              /* width:34rem; */
              margin-left:  auto;
              margin-right: auto;
              /* background-color:red; */
          }

          .masthead {
              margin-top:2rem;
              margin-right:11rem;
              margin-bottom: 0;
              /* text-align:right; */
              position:fixed;
              top:0;
              right:50%;
              display:block;
              width:13rem;
              height:100%;
          }
          .post-with-comments {
              /* float:left; */
              margin-left:20rem;
              /* width:34rem; */
              display:inline-block;
              /* overflow:scroll; */
          }

          .post-ad-mobile {display: none;}
      }

      @media (min-width: 76.3rem) {
          .container {
              /* overflow:hidden; */
              max-width: 31rem;
              /* width:34rem; */
              margin-left:  auto;
              margin-right: auto;
              /* background-color:red; */
          }

          .post-with-comments {
              margin-left: 0;
              margin-right: 0;
          }

          .right-sidebar {
              font-family: "Droid Serif", serif;
              padding-bottom: 0;
              margin-right: 0rem;
              margin-top:1.3rem;
              margin-left:20rem;
              margin-bottom: 0;
              /* text-align:right; */
              position:fixed;
              top:0;
              left:50%;
              display:inline-block;
              width:15rem;
              height:100%;
              /* background-color:blue; */
          }

          .masthead {
              /* background-color:blue; */
              margin-right:20rem;
              /* text-align:right; */
          }
      }
      #+END_EXAMPLE

** NEXT steal font from https://kungsgeten.github.io/yankpad.html                         :userstory:
:PROPERTIES:
:CREATED:  [2016-07-19 Tue 22:56]
:END:

- only if the font is not loaded from a third party server (privacy!)
- [X] find out how to set this font
  - https://kungsgeten.github.io/static_about.html
    #+BEGIN_QUOTE
    This blog is created with Emacs using the amazing org-mode. Most of
    the text is set in [[Alegreya][Alegreya]] — except for code snippets and other
    monospace text, which is set in [[Cousine][Cousine]]. Much of the typography — the
    use of sidenotes and sections separated by whitespace, starting the
    sentence with small caps — is inspired by Edward Tufte’s work.
    #+END_QUOTE
    - https://www.google.com/fonts/specimen/Alegreya
- [ ] Is it possible to host this font on my own server?
  - https://www.google.com/fonts#UsePlace:use/Collection:Alegreya
    - this uses Google servers
  - [ ] https://developers.google.com/fonts/
  - [ ] http://michaelboeke.com/blog/2013/09/10/Self-hosting-Google-web-fonts/
  - [ ] https://github.com/majodev/google-webfonts-helper

** NEXT add "estimated time to read" at top (+ autotag?)
:PROPERTIES:
:ID: autotag-estimated-time-to-read
:CREATED:  [2016-05-25 Wed 12:57]
:END:

- https://www.phase2technology.com/blog/implementing-an-estimated-read-time-on-articles/
- http://cs.stackexchange.com/questions/57285/how-to-calculate-an-accurate-estimated-reading-time-of-text
  - algorithm
- http://niram.org/read/
  - 200 words/min
- http://marketingland.com/estimated-reading-times-increase-engagement-79830
  - «Research varies, but generally, the average adult reads 200-250 words in one minute.»
  - arguments *against* using this feature (makes people angry)

** NEXT write lazyblorg-manual
:PROPERTIES:
:CREATED:  [2016-05-08 Sun 12:31]
:END:

- location: lazyblorg.org
- publish on publicvoit

** NEXT remove list-itemize (and mytable?) from code and docu
:PROPERTIES:
:CREATED:  [2016-02-13 Sat 11:33]
:END:

- it was replaced by pypandoc

** NEXT make show-sidebar-text work: show sidebar on small displays                      :userstory:
:PROPERTIES:
:CREATED:  [2015-06-27 Sat 19:06]
:END:
:LOGBOOK:
- Not scheduled, was "[2016-02-26 Fri]" on [2016-02-26 Fri 18:49]
- Rescheduled from "[2015-10-24 Sat]" on [2016-02-14 Sun 08:49]
- Rescheduled from "[2015-09-25 Fri]" on [2015-09-24 Thu 19:58]
- Rescheduled from "[2015-07-25 Sat]" on [2015-07-25 Sat 18:37]
- Rescheduled from "<2015-07-19 Sun>" on [2015-07-20 Mon 19:19]
- Rescheduled from "<2015-07-17 Fri>" on [2015-07-17 Fri 18:57]
- Rescheduled from "<2015-06-28 Sun>" on [2015-07-11 Sat 11:51]
:END:

** NEXT DOI for blog entries?
:PROPERTIES:
:CREATED:  [2016-10-07 Fri 14:50]
:END:

- http://www.doi.org/faq.html
  - «register via a DOI Registration Agency (RA)»
  - annual fees: [[http://www.crossref.org/02publishers/20pub_fees.html][example by crossref]]
    - no free service
- [[https://thewinnower.com/posts/archiving-and-aggregating-alternative-scholarly-content-dois-for-blogs][Wordpress-plugin which provides DOIs]]

** STARTED [#A] branch: replace htmlizer with pypandoc                                :architecture:
:PROPERTIES:
:CREATED:  [2015-01-27 Tue 12:22]
:END:

- why?
  - Org-syntax elements like lists or tables are hard to parse and
    htmlize correctly
  - third party Org-mode parser and htmlizer would be *great*
    - need to check third party library using unit tests!

- this attempt:
  - keep control of the basic parsing/htmlizing process
  - convert blocks using pypandoc library
  - reduce complexity of current parser/htmlizer

- process
  1. [X] get a rough overview what needs to be changed
  2. [X] write unit-test for basic test of pypandoc!
  3. [X] document pypandoc requirement and its test
  4. [X] include test_pypandoc.py in testall
  5. [X] thinking of: keeping parser/htmlizer and using pypandoc only
     for hard to parse/htmlize blocks?
     - [X] test naïve pypandoc lazyblorg for public-voit before
     - decision: I stick to my own parser so far and might convert
       some Org-mode syntax elements to pypandoc later on
  6. [ ] data model (file_blog_data)
     - simplified: instead of blocks and so on, there will only be
       meta-data from the headings and blobs of Org-mode blocks
     - decision: not feasible because I need to much
       insider-information on the blocks in order to do all the magic
  7. [X] implement exception handling when pypandoc is not found/installed
  8. [X] implement pypandoc_test.py testcase with all used Org-mode syntax elements
  9. [-] implement tables using pypandoc
     - in order to get experience of the possibilities
     - don't forget sanitizing
     - [X] write parser
     - [X] write parser tests
     - [X] write htmlizer
     - [X] write htmlizer tests
     - [ ] add CSS for tables
  10. [-] implement lists using pypandoc
      - don't forget sanitizing
      - [X] write parser
      - [ ] write parser tests
      - [X] write htmlizer
      - [X] write htmlizer tests with complicated lists
      - [ ] add CSS for lists
  11. [X] pypandoc as fall-back for any content which has no special treatment
  12. lazyblorg.py
      - [ ] generate_output()
        - using a different output module!
          - pandocizer.py (or similar)
      - [ ] keep old orgparser for templates?
  13. htmlizer.py -copy-> pandocizer.py (or similar)
      - [ ] feed generator definitions
        - feedentry += '\n'.join(blog_data_entry['content'])
        - feedentry += '\n'.join(blog_data_entry['htmlteaser'])
      - [ ] generate_entry_page()
      - [ ] sanitize_and_htmlize_blog_content() -> completely obsolete?
      - [ ] htmlize_simple_text_formatting() -> completely obsolete?
      - [ ] sanitize_html_characters() -> completely obsolete?
      - [ ] _generate_temporal_article()
      - [ ] _generate_persistent_article()

** NEXT add? [[http://www.heise.de/newsticker/meldung/c-t-entwickelt-datenschutzfreundliche-Social-Media-Buttons-weiter-2466687.html][Shariff: c't entwickelt datenschutzfreundliche Social-Media-Buttons weiter]]   :userstory:
:PROPERTIES:
:CREATED:  [2014-11-30 Sun 12:42]
:END:

- Erklärung: http://www.heise.de/newsticker/foren/S-Re-Find-ich-schon-Re-Keine-gute-Idee/forum-288901/msg-26149283/read/
  - http://www.heise.de/ct/ausgabe/2014-26-Social-Media-Buttons-datenschutzkonform-nutzen-2463330.html
- https://github.com/heiseonline/shariff
** NEXT CSS: blocks like src: remove lines from right/top/bottom & add color gradient to right :wish:
:PROPERTIES:
:CREATED:  [2014-08-10 Sun 18:32]
:END:

** SOMEDAY tag cloud: contrast of tags resembles age of usage
:PROPERTIES:
:CREATED:  [2017-01-02 Mon 16:56]
:END:
:LOGBOOK:
- State "SOMEDAY"    from "NEXT"       [2017-02-12 Sun 11:01]
:END:

- contrast of tag colour :: last menioning of tag
  - light gray: every tag that was not mentioned in the recent two years
  - several steps of grayiness/black from two years until now (or
    most recent blog article)
  - [ ] need for a legend?

- [ ] implement "taglist_with_update_date(create/update)"
** SOMEDAY switch to Bootstrap CSS/HTML framework                                     :architecture:
:PROPERTIES:
:CREATED:  [2015-07-14 Tue 17:22]
:END:
:LOGBOOK:
- State "SOMEDAY"    from ""           [2015-07-14 Tue 17:22]
:END:

- Bootstrap: outsourcing my poor CSS knowledge to experts
  - https://en.wikipedia.org/wiki/Bootstrap_%28front-end_framework%29
    - http://getbootstrap.com/
      - http://getbootstrap.com/examples/blog/
  - http://prideparrot.com/blog/archive/2014/4/blog_template_using_twitter_bootstrap3_part1
    - verbose how-to from ground up!
      - almost too verbose :-(
    - looks great!
  - http://erjjones.github.io/blog/How-I-built-my-blog-in-one-day/
    - with Jekyll

downsides:
- add an external dependency
- add complexity (I may not need?)
- current HTML has to be re-designed to fit Bootstrap
- I still need to understand something in order to adapt it to my needs

** SOMEDAY bridge to Diaspora or similar Twitter-like services
:PROPERTIES:
:CREATED:  [2017-01-06 Fri 22:59]
:END:
:LOGBOOK:
- State "SOMEDAY"    from "STARTED"    [2017-01-06 Fri 22:59]
:END:

** NEXT fix: ~-escaping                                                                        :bug:
:PROPERTIES:
:CREATED:  [2014-06-22 Sun 18:32]
:END:

- https://github.com/novoid/lazyblorg/issues/5

- see id:2014-05-09-managing-digital-photographs
: All portrait photographs are rotated using [[http://www.sentex.net/~mwandel/jhead/][jhead]]. Also
: with jhead, I generate file-name time-stamps from the Exif header
: time-stamps. Using [[https://github.com/novoid/date2name][date2name]] I add time-stamps also to the movie
: files. After processing all those files, they get moved to the
: destination folder for new digicam files: ~$HOME/tmp/digicam/tmp/~.

... will be transformed into:

#+BEGIN_EXPORT HTML
All portrait photographs are rotated using
<a href="http://www.sentex.net/<code>mwandel/jhead/">jhead</a>. Also with jhead,
I generate file-name time-stamps from the Exif header time-stamps.
Using <a href="https://github.com/novoid/date2name">date2name</a> I add time-stamps
also to the movie files. After processing all those files, they get moved to the
destination folder for new digicam files: </code>$HOME/tmp/digicam/tmp/~.
#+END_EXPORT

... which is wrong

** STARTED get ordered lists of blog entries                  :architecture:
:PROPERTIES:
:CREATED:  [2014-02-01 Sat 13:48]
:END:

- [X] time-ordered by last modification (for FEED and main page)
  - Newest entry of entry['finished-timestamp-history'] is the
    time-stamp of the last update
  - for each entry in entries
    - get newest entry of entry['finished-timestamp-history']
    - store to a sorted list (newest first or last)

- [ ] time-ordered by issue day (for overview pages)
  - Oldest entry of entry['finished-timestamp-history'] is the publication time-stamp!
  - for each entry in entries
    - get oldest entry of entry['finished-timestamp-history']
    - store to a sorted list (newest first or last)

** NEXT add: --include-archived-entries                                                  :userstory:
:PROPERTIES:
:CREATED:  [2014-10-19 So 12:01]
:END:

- [ ] define, what "archived entries" is
  - tag :ARCHIVE:
  - file.org_archive
  - FIXXME
- [ ] check if archived tag gets removed
- [ ] add command line parameter for adding archived entries
  - by default, archived entries do *not* get added to the blog

** NEXT fix tilde in URL                                                                       :bug:
:PROPERTIES:
:CREATED:  [2014-03-30 Sun 14:55]
:END:

- https://github.com/novoid/lazyblorg/issues/5

: http://sd.wareonearth.com/~phil/xdu/examp1.gif
... gets messed up to:
: http://sd.wareonearth.com/</code>phil/xdu/examp1.gif
on https://karl-voit.at/2014/03/25/xdu

- [ ] add unit test to htmlizer
- [ ] fix bug
- [ ] test

** NEXT escape <> in blocks                                                                    :bug:
:PROPERTIES:
:CREATED:  [2014-04-12 Sat 18:03]
:END:

- https://github.com/novoid/lazyblorg/issues/6

** NEXT mark integration points with "## INTEGRATION: "           :userstory:
:PROPERTIES:
:CREATED:  [2014-03-16 Sun 20:04]
:END:
** NEXT move feed generator from htmlizer in own module       :architecture:
:PROPERTIES:
:CREATED:  [2014-03-18 Di 09:53]
:END:
** NEXT Tag statistics page

- 10 most frequently used tags (with occurrence)
- 10 leastd frequently used tags (with occurrence; if occurrence == 1
  → show link to article)

** NEXT selected tag-based feeds (english, german, bicycle,...)
:PROPERTIES:
:ID: 2016-05-22-tag-feeds
:CREATED:  [2016-05-22 Sun 18:57]
:END:

** NEXT create pull-request on https://github.com/hober/planet.emacsen.org/ for my emacs/english feed
SCHEDULED: <2016-11-22 Tue>
:PROPERTIES:
:BLOCKER: 2016-05-22-tag-feeds
:CREATED: [2015-11-13 Fri 07:20]
:END:
:LOGBOOK:
- Rescheduled from "[2016-05-22 Sun]" on [2016-05-22 Sun 18:58]
- Rescheduled from "[2016-05-15 Sun]" on [2016-05-19 Thu 13:42]
- Rescheduled from "[2016-05-13 Fri]" on [2016-05-14 Sat 10:34]
:END:

** NEXT HTML: manually create archive overview page         :architecture:


#+BEGIN_EXAMPLE
[[Public Voit]] > Archive

[from year of oldest entry to year of newest entry]

|     | 2009 | 2010 | 2011 | 2012 | 2013 | 2014 |
| Jan |      |      |      |      |      |      |
| Feb |      |      |      |      |      |      |
| Mar |[[1]] |      |      |      |      |      |
| Apr |      |      |      |      |      |      |
| May |[[5]] |      |      |      |      |      |
| Jun |      |      |      |      |      |      |
| Jul |      |      |      |      |      |      |
| Aug |[[2]] |      |      |      |      |      |
| Sep |      |      |      |      |      |      |
| Oct |      |      |      |      |      |      |
| Nov |      |      |      |      |      |      |
| Dec |      |      |      |      |      |      |



|      | Jan | Feb | Mar | Apr | May | Jun | Jul | Aug | Sep | Oct | Nov | Dec |
| 2009 |     |     |[[1]]|     |[[5]]|     |     |[[2]]|     |     |     |     |
| 2010 |     |     |     |     |     |     |     |     |     |     |     |     |
| 2011 |     |     |     |     |     |     |     |     |     |     |     |     |
| 2012 |     |     |     |     |     |     |     |     |     |     |     |     |
| 2013 |     |     |     |     |     |     |     |     |     |     |     |     |
| 2014 |     |     |     |     |     |     |     |     |     |     |     |     |

#+END_EXAMPLE

- tasks
  - [ ] create blog-format.org entries with HTML source and
    replacement entities
  - [ ] implement in Python

** NEXT HTML: manually create year overview page              :architecture:
:PROPERTIES:
:CREATED:  [2013-02-12 Tue 14:12]
:END:

#+BEGIN_EXAMPLE
[[Public Voit]] > [[Archive]]: 2014

January: 2 [is link to monthly overview]
February:
March: 4
...

#+END_EXAMPLE

- tasks
  - [ ] create blog-format.org entries with HTML source and
    replacement entities
  - [ ] implement in Python

** STARTED HTML: manually create month overview page          :architecture:
:PROPERTIES:
:CREATED:  [2013-02-12 Tue 14:12]
:END:
:LOGBOOK:
- Not scheduled, was "2014-03-01 Sat" on [2014-03-01 Sat 21:01]
:END:

#+BEGIN_EXAMPLE
[[Public Voit]] > [[2014]] - 01

- 2014-01-17: Title of the blog article
- 2014-01-21: Another title

#+END_EXAMPLE

- tasks
  - [X] create blog-format.org entries with HTML source and
    replacement entities
  - [ ] implement in Python

** NEXT HTML: manually create day overview page               :architecture:
:PROPERTIES:
:CREATED:  [2013-02-12 Tue 14:11]
:END:
:LOGBOOK:
- Not scheduled, was "2014-03-01 Sat" on [2014-03-01 Sat 21:01]
:END:

like monthly overview but only for the day

- tasks
  - [ ] create blog-format.org entries with HTML source and
    replacement entities
  - [ ] implement in Python

- https://docs.python.org/2/library/calendar.html

** NEXT redirection to other ID

- why?
  - to re-direct an old ID/entry when there is a new one
  - to enable short jump-pages like id:aproject-about -> id:2016-10-04-foo-bar-project-about-page

- idea
  - entry with title «redirect: id:foo-bar» results in a simple (minimal) redirect page

- [X] how to generate a simple redirect page?
  - http://stackoverflow.com/questions/5411538/redirect-from-an-html-page
  - http://karl-voit.at/test.html
#+BEGIN_EXPORT HTML
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
  <head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8"/>
    <meta http-equiv="refresh" content="0; url=http://karl-voit.at/2016/10/02/Ehrenhausen-1/" />
    <title>title</title>
  </head>
  <body>
    <p><a href="http://karl-voit.at/2016/10/02/Ehrenhausen-1/">Redirect</a></p>
  </body>
</html>
#+END_EXPORT

- [ ] implement in lazyblorg

** NEXT fix issue where an article can't end with a list item                                  :bug:
:PROPERTIES:
:CREATED:  [2015-05-25 Mon 14:20]
:END:

- https://github.com/novoid/lazyblorg/issues/4
- example: id:2015-05-24-browser-keywords

** NEXT [#A] embed images that are defined by tsfile-statements                          :userstory:
:PROPERTIES:
:CREATED:  [2014-01-29 Wed 17:30]
:END:

- article mentions following:
: [[tsfile:2014-01-29 foo bar.png]]

- open questions

  - [X] how to tell width/height?
    - http://orgmode.org/worg/org-tutorials/images-and-xhtml-export.html
      : #+ATTR_HTML: alt="Zoomed image."
      : #+ATTR_HTML: width="300" style="border:2px solid black;"
      : #+ATTR_HTML: style="float:left;"
      : [[image]]
    - multiple attr-lines per image
      - RegEx: "#+ATTR_HTML: " followed by one or more "alt=[...]", "width=[...]", "height=[...]", "style=[...]"
      - alt -> write directly to alt attribute
      - width/height -> write directly to width/height attribute
      - style -> write directly to style attribute

  - [ ] create yasnippet file with attr line with drop-downs for
    common values
    - [ ] three standard-sizes?
      - small = xx em
      - medium = 50% textwidth
      - big = textwidth

  - [ ] scaling images -> probably future feature instead of here!
    - if scaled, add its size-identifier to original file name
      - "2014-01-29 file name.png" -> "42em/2014-01-29 file name - scaled 42em.png"
      - makes it possible to use same file with different scaling
        sizes

- procedure
  1. [ ] additional parameter of files.org_archive
  2. parse files.org_archive on first usage of tsfile link
     - RegEx: [FILENAME] (with brackets!)
     - create global look-up dict: filename -> path
  3. get file location
     - add as list element in dict "payload"
     - this makes multiple paths per item possible!
  4. error if file not found
     - probably: re-try alternative path if file was found multiple times
  5. in case of article:
     - put file in article folder
     - link locally (relative path)
  6. in case of non-article (persistent, tag, ...):
     - put file in global folder named "tsfile" in root
     - link wirh absolute path
** NEXT catch all exceptions and create a log entry           :architecture:
:PROPERTIES:
:CREATED:  [2013-08-29 Thu 16:28]
:END:

** NEXT Glossary: variable names and so on                    :architecture:
:PROPERTIES:
:CREATED:  [2013-10-14 Mon 12:34]
:END:

** NEXT Refactor: unify all variables according to glossary    :architecture:
:PROPERTIES:
:CREATED:  [2013-10-14 Mon 12:35]
:END:

** NEXT include image files                                      :userstory:
:PROPERTIES:
:CREATED:  [2012-11-05 Mon 10:54]
:END:

- "lbimg:image.png"
  - works in Orgmode using custom link to valid folder
  - lazyblorg recognizes it and translates it to img

- show a fixed maximum width/height image
  - probably with a magnifying glass and a plus symbol in its lower
    right corner
- show the big version when clicking on it

- see Kröner2011 p.140ff for HTML5 and figure/caption

- handle old HTTP-ATTR lines and new Org-mode HTTP attributes

*** TODO research different Org-mode ways of defining including images
:PROPERTIES:
:CREATED:  [2012-11-05 Mon 10:55]
:END:

1. just link a file, do not show image
2. show the linked image directly
** NEXT [#C] move blog-tag(s) to CLI parameter                                           :userstory:
:PROPERTIES:
:CREATED:  [2014-03-08 Sat 18:51]
:END:

- filter Org-mode articles with parameter of one or more tags
- allows for generating different blogs (or sub-blogs) just with
  different commands
** NEXT [#C] CSS: if page is less than one page, place footer at bottom :userstory:
:PROPERTIES:
:CREATED:  [2014-01-31 Fri 23:56]
:END:
** NEXT [#C] research: Python Jinja as template system        :architecture:
:PROPERTIES:
:CREATED:  [2013-09-05 Thu 17:00]
:END:
** NEXT [#C] source code: replace pre with suitable environment  :userstory:
:PROPERTIES:
:CREATED:  [2014-01-30 Thu 16:11]
:END:

- htmlizer.py -> "## FIXXME: replace pre with suitable source code environment!"
** NEXT add "read more articles with tag FOOBAR" to bottom                                :userstory:
:PROPERTIES:
:CREATED:  [2014-10-25 Sat 21:56]
:END:
[2014-10-25 Sa. 09:22]

** TODO ID of sub-headings get stored and processed to anchors   :userstory:
:PROPERTIES:
:CREATED:  [2014-02-09 Sun 10:28]
:END:

- sub-headings within blog articles can have ID-property as well
- parser indexes those IDs
- HTML template adds anchor-ID
- sanitize internal links resolves those links as well

- I want to
  - refer to any ID of any blog article heading or blog article
    sub-heading using the same method:
: [[id:any-id][anchor text]]

- lazyblorg has to be able to derive following according to any ID:
  - get the URL of a blog entry
  - get the ID/HREF of any sub-heading of any blog entry

** TODO mark updates on entries                                :architecture:
:PROPERTIES:
:CREATED:  [2012-11-05 Mon 10:50]
:END:

- heading gets a blog entry with a unique :ID:
- setting "Update 1/2/3/..." for each one of those:
: :LOGBOOK:
: - State "DONE"       from "NEXT"       [2011-10-07 Fri 15:40]
: :END:
- ALTERNATIVELY: set "Update YYYY-MM-DD for last one of those (from above)
- heading with known unique ID and no state DONE
  - should stay the same until state changes back to DONE
  - this requires something which remembers states
  - this requires keeping old entries

- body:
  - manual section:
    - Updates:
      1. YYYY-MM-DD: short description
      2. YYYY-MM-DD: short description

see also id:2012-11-06-ago-generating
** TODO add option to tweet title/url for new/updated articles   :userstory:
:PROPERTIES:
:CREATED:  [2013-10-20 Sun 18:37]
:END:

- e.g., publish new stuff on a "public-voit"-Twitter-account
  - probably there is a cloud service that translates RSS to Twitter?
  - probably more RSS-to-something-translators?

** TODO link to day in Wikipedia                                 :userstory:
:PROPERTIES:
:CREATED:  [2013-01-08 Tue 14:38]
:END:

- historic context
- YYYY-MM-DD -> links to Wikipedia-entries of days
  - https://en.wikipedia.org/wiki/Portal:Current_events/2010_August_26

** STARTED auto-tag entries [0/3]                                                         :userstory:
:PROPERTIES:
:CREATED:  [2012-11-11 Sun 13:43]
:ID: 2012-11-11-autotags
:END:

- auto-tags are visually separated from manual tags to make it clear
  that they are automatically generated (and might be bogus sometime)
- [ ] add to about-page
- [ ] add to documentation (README, ...)
- [ ] syntax of auto-tags
  - or only highlight with different background color of "tags"?

- feeds for auto-tags
  - [ ] feeds/lazyblorg-shorts.*
  - [ ] feeds/lazyblorg-deutsch.*
  - [ ] feeds/lazyblorg-english.*

*** DONE Language                                                                 :autotag_languages:
    CLOSED: [2016-11-16 Wed 22:08]
:PROPERTIES:
:CREATED:  [2012-11-11 Sun 13:44]
:ORDERED:  t
:END:
:LOGBOOK:
- State "DONE"       from              [2016-11-16 Wed 22:08]
:END:

- lang-de, de, en, us, ... ?
- language tag is automatically derived
  - by guessing language based on common stopwords or external library

**** DONE Research: search for stop words
CLOSED: [2015-05-06 Wed 11:26]
:PROPERTIES:
:CREATED:  [2015-05-06 Wed 11:20]
:END:
:LOGBOOK:
- State "DONE"       from ""           [2015-05-06 Wed 11:26]
:END:

- [[http://stackoverflow.com/questions/19560498/faster-way-to-remove-stop-words-in-python]]
#+BEGIN_SRC python
  from nltk.corpus import stopwords

  cachedStopWords = stopwords.words("english")

  def testFuncNew():
      text = 'hello bye the the hi'
      text = ' '.join([word for word in text.split() if word not in cachedStopWords])

  if __name__ == "__main__":
      testFuncNew()
#+END_SRC

  - [ ] return percentage of stopwords for list of known languages

**** DONE install and test nltk.corpus
CLOSED: [2015-05-09 Sat 10:42] SCHEDULED: <2015-05-09 Sat>
:PROPERTIES:
:CREATED:  [2015-05-09 Sat 09:25]
:ID:       2015-05-09-test-nltk
:END:
:LOGBOOK:
- State "DONE"       from "NEXT"       [2015-05-09 Sat 10:42]
:END:

- http://www.nltk.org/api/nltk.corpus.html
  - http://www.nltk.org/install.html
  - http://www.nltk.org/data.html

installing nltk:
#+BEGIN_EXAMPLE
root@gary ~ #  pip install -U nltk
Downloading/unpacking nltk
  Downloading nltk-3.0.2.tar.gz (991Kb): 991Kb downloaded
  Running setup.py egg_info for package nltk

    warning: no files found matching 'Makefile' under directory '*.txt'
    warning: no previously-included files matching '*~' found anywhere in distribution
Installing collected packages: nltk
  Running setup.py install for nltk

    warning: no files found matching 'Makefile' under directory '*.txt'
    warning: no previously-included files matching '*~' found anywhere in distribution
Successfully installed nltk
Cleaning up...
root@gary ~ #
#+END_EXAMPLE

installing nltk.corpus > stopwords:
- ipython
  1. import nltk
  2. nltk.download()
  3. manually selecting corpus
     - second or third tab > stopwords
  4. done

... way to complicated for other lazyblorg-users for just the
stopwords!

: cachedStopWords = stopwords.words("english")
: cachedStopWords.length()  ## -> 127

For German, it's 231 stopwords :-O

Note to myself: use this as argument on the broader variety of the
German language compared to English :-)

Extract a sub-set of those stopwords and store it directly.

Determine words that occur as English and German stopwords:

: In [16]: [x for x in cachedStopWordsde if x in cachedStopWords]
: Out[16]: [u'am', u'an', u'in', u'so', u'was', u'will']

English stopwords without common German ones:
#+BEGIN_SRC python
[u'I',
u'me',
u'my',
u'myself',
u'we',
u'our',
u'ours',
u'ourselves',
u'you',
u'your',
u'yours',
u'yourself',
u'yourselves',
u'he',
u'him',
u'his',
u'himself',
u'she',
u'her',
u'hers',
u'herself',
u'it',
u'its',
u'itself',
u'they',
u'them',
u'their',
u'theirs',
u'themselves',
u'what',
u'which',
u'who',
u'whom',
u'this',
u'that',
u'these',
u'those',
u'is',
u'are',
u'were',
u'be',
u'been',
u'being',
u'have',
u'has',
u'had',
u'having',
u'do',
u'does',
u'did',
u'doing',
u'a',
u'the',
u'and',
u'but',
u'if',
u'or',
u'because',
u'as',
u'until',
u'while',
u'of',
u'at',
u'by',
u'for',
u'with',
u'about',
u'against',
u'between',
u'into',
u'through',
u'during',
u'before',
u'after',
u'above',
u'below',
u'to',
u'from',
u'up',
u'down',
u'on',
u'off',
u'over',
u'under',
u'again',
u'further',
u'then',
u'once',
u'here',
u'there',
u'when',
u'where',
u'why',
u'how',
u'all',
u'any',
u'both',
u'each',
u'few',
u'more',
u'most',
u'other',
u'some',
u'such',
u'no',
u'nor',
u'not',
u'only',
u'own',
u'same',
u'than',
u'too',
u'very',
u'can',
u'just',
u'don',
u'should',
u'now']
#+END_SRC

German stopwords without common English ones:
#+BEGIN_SRC python
[u'aber',
 u'alle',
 u'allem',
 u'allen',
 u'aller',
 u'alles',
 u'als',
 u'also',
 u'ander',
 u'andere',
 u'anderem',
 u'anderen',
 u'anderer',
 u'anderes',
 u'anderm',
 u'andern',
 u'anderr',
 u'anders',
 u'auch',
 u'auf',
 u'aus',
 u'bei',
 u'bin',
 u'bis',
 u'bist',
 u'da',
 u'damit',
 u'dann',
 u'der',
 u'den',
 u'des',
 u'dem',
 u'die',
 u'das',
 u'da\xdf',
 u'derselbe',
 u'derselben',
 u'denselben',
 u'desselben',
 u'demselben',
 u'dieselbe',
 u'dieselben',
 u'dasselbe',
 u'dazu',
 u'dein',
 u'deine',
 u'deinem',
 u'deinen',
 u'deiner',
 u'deines',
 u'denn',
 u'derer',
 u'dessen',
 u'dich',
 u'dir',
 u'du',
 u'dies',
 u'diese',
 u'diesem',
 u'diesen',
 u'dieser',
 u'dieses',
 u'doch',
 u'dort',
 u'durch',
 u'ein',
 u'eine',
 u'einem',
 u'einen',
 u'einer',
 u'eines',
 u'einig',
 u'einige',
 u'einigem',
 u'einigen',
 u'einiger',
 u'einiges',
 u'einmal',
 u'er',
 u'ihn',
 u'ihm',
 u'es',
 u'etwas',
 u'euer',
 u'eure',
 u'eurem',
 u'euren',
 u'eurer',
 u'eures',
 u'f\xfcr',
 u'gegen',
 u'gewesen',
 u'hab',
 u'habe',
 u'haben',
 u'hat',
 u'hatte',
 u'hatten',
 u'hier',
 u'hin',
 u'hinter',
 u'ich',
 u'mich',
 u'mir',
 u'ihr',
 u'ihre',
 u'ihrem',
 u'ihren',
 u'ihrer',
 u'ihres',
 u'euch',
 u'im',
 u'indem',
 u'ins',
 u'ist',
 u'jede',
 u'jedem',
 u'jeden',
 u'jeder',
 u'jedes',
 u'jene',
 u'jenem',
 u'jenen',
 u'jener',
 u'jenes',
 u'jetzt',
 u'kann',
 u'kein',
 u'keine',
 u'keinem',
 u'keinen',
 u'keiner',
 u'keines',
 u'k\xf6nnen',
 u'k\xf6nnte',
 u'machen',
 u'man',
 u'manche',
 u'manchem',
 u'manchen',
 u'mancher',
 u'manches',
 u'mein',
 u'meine',
 u'meinem',
 u'meinen',
 u'meiner',
 u'meines',
 u'mit',
 u'muss',
 u'musste',
 u'nach',
 u'nicht',
 u'nichts',
 u'noch',
 u'nun',
 u'nur',
 u'ob',
 u'oder',
 u'ohne',
 u'sehr',
 u'sein',
 u'seine',
 u'seinem',
 u'seinen',
 u'seiner',
 u'seines',
 u'selbst',
 u'sich',
 u'sie',
 u'ihnen',
 u'sind',
 u'solche',
 u'solchem',
 u'solchen',
 u'solcher',
 u'solches',
 u'soll',
 u'sollte',
 u'sondern',
 u'sonst',
 u'\xfcber',
 u'um',
 u'und',
 u'uns',
 u'unse',
 u'unsem',
 u'unsen',
 u'unser',
 u'unses',
 u'unter',
 u'viel',
 u'vom',
 u'von',
 u'vor',
 u'w\xe4hrend',
 u'war',
 u'waren',
 u'warst',
 u'weg',
 u'weil',
 u'weiter',
 u'welche',
 u'welchem',
 u'welchen',
 u'welcher',
 u'welches',
 u'wenn',
 u'werde',
 u'werden',
 u'wie',
 u'wieder',
 u'wir',
 u'wird',
 u'wirst',
 u'wo',
 u'wollen',
 u'wollte',
 u'w\xfcrde',
 u'w\xfcrden',
 u'zu',
 u'zum',
 u'zur',
 u'zwar',
 u'zwischen']
#+END_SRC

**** CANCELLED implement: basic usage of nltk.corpus > stopwords                         :ARCHIVE:
CLOSED: [2015-05-09 Sat 10:42] SCHEDULED: <2015-05-09 Sat>
:PROPERTIES:
:CREATED:  [2015-05-06 Wed 11:26]
:END:
:LOGBOOK:
- State "CANCELLED"  from "NEXT"       [2015-05-09 Sat 10:42] \\
  nltk install overhead too complicated just for the stopword lists
:END:
**** CANCELLED implement: exception handling if nltk is not installed yet                :ARCHIVE:
CLOSED: [2015-05-09 Sat 10:43] SCHEDULED: <2015-05-09 Sat>
:PROPERTIES:
:CREATED:  [2015-05-06 Wed 11:26]
:END:
:LOGBOOK:
- State "CANCELLED"  from "NEXT"       [2015-05-09 Sat 10:43] \\
  nltk install overhead too complicated just for the stopword lists
:END:

**** DONE get license of stopword list from nltk
CLOSED: [2015-05-09 Sat 10:49]
:PROPERTIES:
:CREATED:  [2015-05-09 Sat 10:43]
:END:
:LOGBOOK:
- State "DONE"       from "NEXT"       [2015-05-09 Sat 10:49]
:END:

- https://github.com/nltk/nltk/wiki/FAQ
  - " The corpora are distributed under various licenses, as
    documented in their respective README files."
    - locate: file:~/nltk_data/corpora/stopwords/README
      - "They were obtained from:
        http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/src/backend/snowball/stopwords/"

**** DONE include list of stopwords in source
CLOSED: [2015-05-09 Sat 12:17]
:PROPERTIES:
:CREATED:  [2015-05-09 Sat 10:43]
:END:
:LOGBOOK:
- State "DONE"       from "NEXT"       [2015-05-09 Sat 12:17]
:END:

see id:2015-05-09-test-nltk for stopwords and extracting the lists

**** DONE implement: return percentage of stopwords for list of known languages
CLOSED: [2015-05-09 Sat 12:17] SCHEDULED: <2015-05-09 Sat>
:PROPERTIES:
:CREATED:  [2015-05-06 Wed 11:26]
:END:
:LOGBOOK:
- State "DONE"       from "NEXT"       [2015-05-09 Sat 12:17]
:END:
**** DONE implement: enable language guessing auto-tag using command line argument
CLOSED: [2015-05-09 Sat 18:47]
:PROPERTIES:
:CREATED:  [2015-05-09 Sat 12:18]
:END:
:LOGBOOK:
- State "DONE"       from "NEXT"       [2015-05-09 Sat 18:47]
:END:

**** DONE implement: save auto-tag to object
CLOSED: [2015-05-09 Sat 18:47] SCHEDULED: <2015-05-09 Sat>
:PROPERTIES:
:CREATED:  [2015-05-06 Wed 11:27]
:END:
:LOGBOOK:
- State "DONE"       from "NEXT"       [2015-05-09 Sat 18:47]
:END:

*** Length
:PROPERTIES:
:CREATED:  [2012-11-11 Sun 13:44]
:END:

- e.g., articles whose preview is equal to the whole article (i.e.: no
  sub-heading, no horizontal line) are marked with autotag-shorty (or similar)

- oneliners
  - below a certain threshold
- middlesize(sic?)
  - between oneliners and fullsizeentries
- fullsize(sic?)

compare: id:autotag-estimated-time-to-read

*** Auto-Disclaimer
:PROPERTIES:
:CREATED:  [2012-11-15 Thu 11:47]
:END:

- hooks for :TAGS: (can be optional) or case-sensitive keywords in headings
- if found:
  - link to a special pre-defined page

- Example: if "What The World Needs"|"WTWN:" is found, link to a page
  where WTWN-series is described in general.

*** STARTED implement: display auto-tags (differently)
    :PROPERTIES:
    :CREATED:  [2015-05-06 Wed 11:27]
    :END:
:LOGBOOK:
- Not scheduled, was "<2015-05-09 Sat>" on [2015-05-09 Sat 22:49]
:END:

- [X] write class information
- [ ] different CSS format for the two classes
** TODO add tree of headings on each article with sub-headings   :userstory:
:PROPERTIES:
:CREATED:  [2014-02-08 Sat 11:06]
:END:

- probably in sidebar?
** TODO handle Org-mode priorities in heading                    :userstory:
:PROPERTIES:
:CREATED:  [2014-02-08 Sat 11:11]
:END:

Like "[#A]".

- possible ideas
  - ignore priorities
    - suppress!
  - convert into given tags ("important", ...)

** TODO [#B] CSS generated using Org/babel                    :architecture:
:PROPERTIES:
:CREATED:  [2012-12-13 Thu 10:08]
:END:

- css.org with Comments and css-blocks

#+BEGIN_SRC css
example-CSS content
#+END_SRC

- automatically extracting CSS code from that Org-mode file

- example: http://www.tbray.org/ongoing/When/201x/2011/04/21/Reflowing

backward compatibility for old browsers:
#+BEGIN_SRC css
section, article, header, footer, nav, aside, hgroup {
display: block;
}
#+END_SRC
** TODO [#B] format tables                                       :userstory:
:PROPERTIES:
:CREATED:  [2012-12-21 Fri 09:49]
:END:

- add JavaScript to be able to sort by column
- possible cnadidates for methods
  - http://tablesorter.com/docs/
  - HTML5 (?)
  - CSS: http://www.cssjuice.com/16-sortable-table-techniques/

- for lists
  - http://farhadi.ir/projects/html5sortable/

** TODO [#C] add frames to images                                :userstory:
:PROPERTIES:
:CREATED:  [2013-02-12 Tue 11:27]
:END:

- example: http://www.tbray.org/ongoing/When/200x/2006/04/08/Picture-Frames
  - caution: that's Java

** SOMEDAY simplify HTML, omit tags
:PROPERTIES:
:CREATED:  [2016-11-02 Wed 16:58]
:END:
:LOGBOOK:
- State "SOMEDAY"    from              [2016-11-02 Wed 16:58]
:END:

- https://twitter.com/stefan2904/status/793832217940140033
  - IMPORTANT: https://google.github.io/styleguide/htmlcssguide.xml?showone=Optional_Tags#Optional_Tags

** SOMEDAY include bookmarks to lazyblorg                                                     :wish:
:PROPERTIES:
:CREATED:  [2015-06-21 Sun 11:37]
:END:
:LOGBOOK:
- State "SOMEDAY"    from "NEXT"       [2015-06-21 Sun 11:39]
:END:

- I store bookmarks according to [[http://karl-voit.at/2014/08/10/bookmarks-with-orgmode/][Managing web bookmarks with Org-mode]]
- Idea: create short (minimal) pages per bookmark

** SOMEDAY show (small) links to tag-matching bookmarks on articles and tag-pages             :wish:
:PROPERTIES:
:CREATED:  [2015-06-21 Sun 11:37]
:END:
:LOGBOOK:
- State "SOMEDAY"    from "NEXT"       [2015-06-21 Sun 11:40]
:END:
** SOMEDAY add diff to previous version in case of update        :userstory:
:PROPERTIES:
:CREATED:  [2014-02-28 Fr 09:27]
:END:
:LOGBOOK:
- State "SOMEDAY"    from ""           [2014-02-28 Fr 09:27]
:END:

- should be possible because lazyblorg stores old raw content and gets
  new one
- [ ] what happens in case of re-generation blog with old diffs?

** SOMEDAY [#C] Pre-search for new blog articles before invoking lazyblorg :userstory:
:PROPERTIES:
:CREATED:  [2013-10-20 Sun 18:34]
:END:
:LOGBOOK:
- State "SOMEDAY"    from "TODO"       [2014-02-01 Sat 15:36]
:END:

- do a "egrep '^\*+ .*:blog:' | wc -l" and compare with last number
  - if changed, run lazyblorg
  - if not changed, do nothing
- does not work when same number of blog articles get deleted as
  created in between
- probably add this to best practice or FAQs

** SOMEDAY add/create/include/handle short URLs for each entry   :userstory:
:PROPERTIES:
:CREATED:  [2013-08-20 Tue 10:56]
:END:
:LOGBOOK:
- State "SOMEDAY"    from ""           [2013-08-20 Tue 10:56]
:END:

- e.g.:
  - www.example.com/blog/i/aB3 ->
  - www.example.com/i/aB3 ->
- generate short URL as hash from ID?
  - is it possible without getting a high chance of conflicts?
    - YES:
      - use 4-letter-part of sha1-hash
      - before storing, check on conflict with existing one
        - use creation-date as first-come-first-serve
        - in case of conflict: add more sha1-letters to short-URL

- [2013-08-29 Thu]: idea: www.example.com/s(.html)#ID
  - one (long) HTML page with links to all pages
    - large space between entries such that entries can not be mixed
      up (showing multiple entries the same time)
    - disadvantage: user has to click on the URL of the article
  - working: /index.shtml#realcontent
    - www.example.com/s.html#ID
  - working: /#realcontent
    - www.example.com/s/#ID
    - *shorter!*

** SOMEDAY fixed entries by using a tag                          :userstory:
:PROPERTIES:
:CREATED:  [2012-12-21 Fri 09:48]
:END:
:LOGBOOK:
- State "SOMEDAY"    from ""           [2013-01-08 Tue 14:46]
:END:

- outside of YYYY/MM/DD-hierarchy
- e.g.
  - tools I use
  - books I read
  - ...
** SOMEDAY publish (only) free/busy times (in multiple formats)  :userstory:
:PROPERTIES:
:CREATED:  [2012-12-29 Sat 17:40]
:END:
:LOGBOOK:
- State "SOMEDAY"    from ""           [2013-01-08 Tue 14:48]
:END:

** SOMEDAY CSS: round corners of images                          :userstory:
:PROPERTIES:
:CREATED:  [2013-01-07 Mon 18:40]
:END:
:LOGBOOK:
- State "SOMEDAY"    from "NEXT"       [2013-01-08 Tue 14:53]
:END:

- probably steal from http://www.tbray.org/ongoing/

** SOMEDAY [[http://tasker.dinglisch.net/][Tasker]]-script: share URL and send to my lazyblorg     :userstory:
:PROPERTIES:
:CREATED:  [2013-08-22 Thu 21:19]
:END:
:LOGBOOK:
- State "SOMEDAY"    from ""           [2013-07-20 Sat 10:58]
:END:

- open questions
  - encryption
    - necessary? in the end, it gets public anyway :-)
  - prevent "content injection"
    - PKI: signing with private GnuPG-key of phone device?
      - DoS-attack still possible
        - sending a lot of fake messages
    - synchronous password?
    - ?
** SOMEDAY re-generate only necessary entries/pages            :architecture:
:PROPERTIES:
:CREATED:  [2013-08-22 Thu 21:19]
:END:
:LOGBOOK:
- State "SOMEDAY"    from ""           [2013-08-22 Thu 21:19]
:END:

switch from "delete everything and re-generate everything on every
run" to "delete and re-generate only necessary entries/pages"

- [ ] adopt docstring of compare_blog_metadata()

** SOMEDAY [#C] in order not to parse *whole* content, split up parsing :architecture:
:PROPERTIES:
:CREATED:  [2013-08-21 Wed 11:58]
:END:
:LOGBOOK:
- State "SOMEDAY"    from ""           [2013-08-21 Wed 11:58]
:END:

For optimizing performance and RAM usage: use *two parsing processes*:

  1. find new or updated articles
     - parse for used ID-links
     - collect and store metadata of these (everything except content)
     - print out warnings for all IDs that are broken links
     - create creative 404-page for all broken links in the meantime

  2. parse everything again and store only new or updated article contents
     - match with ID-links
** SOMEDAY [#C] do not parse HTML template file if unchanged  :architecture:
:PROPERTIES:
:CREATED:  [2013-08-26 Mon 19:41]
:END:
:LOGBOOK:
- State "SOMEDAY"    from ""           [2013-08-26 Mon 19:41]
:END:

- not much of a performance difference
- only a nice-to-have

** SOMEDAY implement bookmark RSS in lazyblorg
:PROPERTIES:
:CREATED:  [2014-01-20 Mon 19:33]
:END:
:LOGBOOK:
- State "SOMEDAY"    from ""           [2014-01-20 Mon 19:33]
:END:

- [ ] handle public/private tags accordingly (or: noexport?)
- [ ] migrate delicious private field to private tag

** SOMEDAY test alternative methods to generate ATOM feeds
   :PROPERTIES:
   :CREATED:  [2016-11-06 Sun 17:44]
   :END:
   :LOGBOOK:
   - State "SOMEDAY"    from              [2016-11-06 Sun 17:44]
   :END:

- [ ] test cgi.escape http://stackoverflow.com/questions/1061697/whats-the-easiest-way-to-escape-html-in-python
  - escapes <, >, and &
      #+BEGIN_QUOTE
      [[http://docs.python.org/library/cgi.html#cgi.escape][cgi.escape]] is fine. It escapes:

          < to &lt;
          > to &gt;
          & to &amp;

      That is enough for all HTML.

      EDIT: If you have non-ascii chars you also want to escape, for
      inclusion in another encoded document that uses a different
      encoding, like Craig says, just use:

      #+BEGIN_SRC python
      data.encode('ascii', 'xmlcharrefreplace')
      #+END_SRC

      Don't forget to decode data to unicode first, using whatever
      encoding it was encoded.

      However in my experience that kind of encoding is useless if you
      just work with unicode all the time from start. Just encode at the
      end to the encoding specified in the document header (utf-8 for
      maximum compatibility).

      Example:

      >>> cgi.escape(u'<a>bá</a>').encode('ascii', 'xmlcharrefreplace')
      '&lt;a&gt;b&#225;&lt;/a&gt;

      Also worth of note (thanks Greg) is the extra quote parameter
      cgi.escape takes. With it set to True, cgi.escape also escapes
      double quote chars (") so you can use the resulting value in a
      XML/HTML attribute.

      EDIT: Note that cgi.escape has been deprecated in Python 3.2 in
      favor of [[http://docs.python.org/3/library/html.html#html.escape][html.escape]], which does the same except that quote
      defaults to True.
      #+END_QUOTE

- Debian/Python-modules to generate feed altogether (outsourcing feed generation)
  - python-feedgenerator: https://github.com/dmdm/feedgenerator-py3k
    - moved to differen repository and has few contributors

  - [ ] check out https://github.com/lkiesow/python-feedgen

#+BEGIN_SRC python
from feedgen.feed import FeedGenerator
fg = FeedGenerator()
fg.id('http://lernfunk.de/media/654321')
fg.title('Some Testfeed')
fg.author( {'name':'John Doe','email':'john@example.de'} )
fg.link( href='http://example.com', rel='alternate' )
fg.logo('http://ex.com/logo.jpg')
fg.subtitle('This is a cool feed!')
fg.link( href='http://larskiesow.de/test.atom', rel='self' )
fg.language('en')

fe = fg.add_entry()
fe.id('http://lernfunk.de/media/654321/1')
fe.title('The First Episode')

atomfeed = fg.atom_str(pretty=True) # Get the ATOM feed as string
rssfeed  = fg.rss_str(pretty=True) # Get the RSS feed as string
fg.atom_file('atom.xml') # Write the ATOM feed to a file
fg.rss_file('rss.xml') # Write the RSS feed to a file
#+END_SRC

- [ ] test http://stackoverflow.com/questions/174890/how-to-output-cdata-using-elementtree
- [ ] test http://stackoverflow.com/questions/13694143/parsing-cdata-in-xml-with-python


** STARTED lazyblorg: omit org.txt in search                                                  :@BWG:
:PROPERTIES:
:CREATED:  [2016-03-30 Wed 09:47]
:END:
:LOGBOOK:
- Not scheduled, was "[2016-03-30 Wed]" on [2016-03-30 Wed 20:06]
:END:

- Syntax: https://duck.co/help/results/syntax

- statt ~https://duckduckgo.com/?q=foobar+site%3Akarl-voit.at~
- soll: ~https://duckduckgo.com/?q=foobar+site%3Akarl-voit.at+-filetype%3Aorg.txt~

- search:  ~&site=karl-voit.at&~
- replace: ~&site=karl-voit.at+-filetype=org.txt&~

This does not work very well:
- html-results get hidden with -filetype... that are shown without
  this filter
- there is weird difference between -filetype:txt -filetype:.txt -filetype:org.txt
* Notes                                                               :notes:

** Naming this project
:PROPERTIES:
:CREATED:  [2013-08-20 Tue 10:18]
:END:

lazyblorg - a mixture of lazy, blogging, blog, org-mode - emphasizes
the fact that the *user* of it may be very lazy. This relates to the
minimal effort she/he has to do in order to create a new blog entry.

There are no hits in [[https://www.google.com/#fp%3De12793cfcde69436&hl%3Den&nfpr%3D1&q%3Dlazyblorg&safe%3Doff][Google search for "lazyblorg"]]. However, there
are some for "lazyblog" (without the 'r').

- Other cool names would be:
  - invisiblorg
    - invisible, blog, org-mode
    - emphasizes the invisibility of the blog mechanism once it is
      set up
    - no hits for "[[https://www.google.com/#fp%3De12793cfcde69436&hl%3Den&nfpr%3D1&q%3Dinvisiblorg&safe%3Doff][invisiblorg]]" but some for "invisiblog" or "invisibl.org"
** Short descriptions of the Python modules/files
:PROPERTIES:
:CREATED:  [2013-08-22 Thu 21:24]
:END:

- lazyblorg.py
  - central module which uses all other modules
  - handles command line parameters
  - calls parser
  - gets template data
  - pushes data to htmlizer
- lib/utils.py
  - misc (static) tool-methods that are or might get handy for other
    modules as well
- lib/orgformat.py
  - borrowed from the [[https://github.com/novoid/Memacs][Memacs]] project
  - holds all kind of cool tool-methods to generate Org-mode stuff
    (time-stamps, ...)
- lib/orgparser.py
  - parses an Org-mode file and returns an internal representation of
    matching sections
- lib/htmlizer.py
  - responsible for everything between internal representation of blog
    stuff to create to their resulting files on the hard disk (HTML,
    CSS, ...)

** Implemented Org-mode Elements
:PROPERTIES:
:ID: implemented-org-elements
:CREATED:  [2014-03-03 Mon 20:49]
:END:

- http://orgmode.org/worg/dev/org-syntax.html
  - OLD: list of Org Mode elements: http://article.gmane.org/gmane.emacs.orgmode/67871

- an Org-mode test-file (for unit testing) containing all implemented
  Org-mode syntax elements: [[https://github.com/novoid/lazyblorg/blob/master/testdata/currently_supported_orgmode_syntax.org][testdata/currently_supported_orgmode_syntax.org]]

Org elements: from ox-ascii.el (Org-mode)

#+NAME: implemented-org-elements
| *Org Element*         | [fn:earmarked] | [fn:lowprio] | implemented since | [fn:internalrepresentation]                                                    | *HTML5*                                                  |
|-----------------------+----------------+--------------+-------------------+--------------------------------------------------------------------------------+----------------------------------------------------------|
| external hyperlinks   |                |              | <2014-01-30 Thu>  |                                                                                | a                                                        |
| internal links        |                |              | <2014-03-03 Mon>  |                                                                                | a                                                        |
| bold                  |                |              | <2014-01-30 Thu>  |                                                                                | b                                                        |
| center-block          |                | x            |                   |                                                                                |                                                          |
| clock                 |                | x            |                   |                                                                                |                                                          |
| code                  |                |              | <2014-01-30 Thu>  |                                                                                | code                                                     |
| drawer                |                | x            |                   |                                                                                |                                                          |
| dynamic-block         |                | x            |                   |                                                                                |                                                          |
| entity                |                |              |                   |                                                                                |                                                          |
| example-block         |                |              | <2014-01-30 Thu>  | ['example-block', 'name or None', [u'first line', u'second line']]             | FIXXME                                                   |
| example "colon-block" |                |              | <2014-08-10 Sun>  | ['colon-block', False, [u'first line', u'second line']]                        | pre                                                      |
| export-block          |                | x            |                   |                                                                                |                                                          |
| export-snippet        |                | x            |                   |                                                                                |                                                          |
| fixed-width           |                | x            |                   |                                                                                |                                                          |
| footnote-definition   |                | x            |                   |                                                                                |                                                          |
| footnote-reference    |                | x            |                   |                                                                                |                                                          |
| headline              |                |              | <2014-01-30 Thu>  | ['heading', {'level': 3, 'title': u'my title'}]                                | section+header+h1                                        |
| horizontal-rule       |                |              | <2014-01-31 Fri>  | ['hr']                                                                         | (ignored and only interpreted to mark end of standfirst) |
| inline-src-block      |                | x            |                   |                                                                                |                                                          |
| inlinetask            |                | x            |                   |                                                                                |                                                          |
| inner-template        |                | x            |                   |                                                                                |                                                          |
| italic                |                | x            |                   |                                                                                |                                                          |
| item                  |                |              |                   |                                                                                |                                                          |
| keyword               |                | x            |                   |                                                                                |                                                          |
| latex-environment     |                |              | <2014-01-30 Thu>  | [fn:pypandoc] ['latex-block', 'name or None', [u'first line', u'second line']] |                                                    |
| latex-fragment        |                | x            |                   |                                                                                |                                                          |
| line-break            |                | x            |                   |                                                                                |                                                          |
| link                  | x              |              |                   |                                                                                |                                                          |
| paragraph             |                |              | <2014-01-30 Thu>  | ['par', u'line1', u'line2']                                                    | p                                                        |
| plain-list            | x              |              |                   | ['list-itemize', [u'first line', u'second line']]                              | ul+li                                                    |
| plain-text            |                |              | <2014-01-30 Thu>  | see: paragraph                                                                 |                                                          |
| planning              |                | x            |                   |                                                                                |                                                          |
| quote-block           |                |              | <2014-01-30 Thu>  | ['quote-block', 'name or None', [u'first line', u'second line']]               | blockquote                                               |
| quote-section         |                | ?            |                   |                                                                                |                                                          |
| radio-target          |                | x            |                   |                                                                                |                                                          |
| section               |                |              | <2014-01-30 Thu>  | ['heading', {'title': u'Sub-heading foo', 'level': 3}]                         | h2, h3, ...                                              |
| special-block         |                | x            |                   |                                                                                |                                                          |
| src-block             |                |              | <2014-01-30 Thu>  | ['src-block', 'name or None', [u'first line', u'second line']]                 | pre                                                      |
| statistics-cookie     |                | x            |                   |                                                                                |                                                          |
| strike-through        |                | x            |                   |                                                                                |                                                          |
| subscript             |                | x            |                   |                                                                                |                                                          |
| superscript           |                | x            |                   |                                                                                |                                                          |
| table                 | x              |              |                   | [fn:pypandoc]                                                                  |                                                          |
| table-cell            | x              |              |                   |                                                                                |                                                          |
| table-row             | x              |              |                   |                                                                                |                                                          |
| target                |                |              |                   |                                                                                |                                                          |
| template              |                | x            |                   |                                                                                |                                                          |
| timestamp             |                | x            |                   |                                                                                |                                                          |
| underline             |                | x            |                   |                                                                                |                                                          |
| verbatim              | x              |              |                   |                                                                                | pre                                                      |
| verse-block           |                |              | <2014-01-30 Thu>  | ['verse-block', 'name or None', [u'first line', u'second line']]               | pre                                                      |
| html-block            |                |              | <2014-01-30 Thu>  | ['html-block', 'name or None', [u'first line', u'second line']]                | pre (if no #+NAME: then insert directly!)                |
| *the rest*            |                |              |                   | [fn:pypandoc]                                                                  |                                                          |

NOTE: OrgParser is using "par" for anything it can not interpret as
something else.

[fn:earmarked] Planned to be implemented soon (or at all :-)

[fn:lowprio] This feature is low on my personal development list (way
take some time or might never get implemented)

[fn:pypandoc] This element gets converted using pypndoc (and
additional sanitizing)

[fn:internalrepresentation] usually in list: ~blog_data['id-of-entry']['content']~

- Blocks: (beginning with ~BEGIN_~)
  - EXPORT (new with Org-mode 9)
  - [[http://orgmode.org/org.html#index-g_t_0023_002bBEGIN_005fASCII-1620][ASCII]]
  - [[http://orgmode.org/org.html#index-g_t_0023_002bBEGIN_005fHTML-1661][HTML]]   (deprecated since Org-mode 9)
  - [[http://orgmode.org/org.html#index-g_t_0023_002bBEGIN_005fLATEX-1719][LATEX]]  (deprecated since Org-mode 9)
  - [[http://orgmode.org/org.html#index-g_t_0023_002bBEGIN_005fQUOTE-1493][QUOTE]]
  - [[http://orgmode.org/org.html#index-g_t_0023_002bBEGIN_005fSRC-1885][SRC]]
  - [[http://orgmode.org/org.html#index-g_t_0023_002bBEGIN_005fVERSE-1492][VERSE]]

The list of the placeholders and their occurrence might be a bit
outdated. Please refer to [[https://github.com/novoid/lazyblorg/blob/master/templates/blog-format.org][blog format]] and the source code for the most
current version.

#+NAME: template-placeholders-and-their-processing
| *placeholder*                      | *description*                                      | gets sanitized | *source*                                                  |
|------------------------------------+----------------------------------------------------+----------------+-----------------------------------------------------------|
| #ARTICLE-TITLE#                    | heading/title of the blog article                  | x              | Org: heading                                              |
| #ARTICLE-ID#                       | id of the article                                  |                | PROPERTIES-drawer                                         |
| #ABOUT-BLOG#                       | a line of text which describes the blog in general |                | FIXXME                                                    |
| #BLOGNAME#                         | short name of the blog                             |                | FIXXME                                                    |
| #ARTICLE-YEAR#                     | four digit year of the article (folder path)       |                | Org: CREATED-time-stamp                                   |
| #ARTICLE-MONTH#                    | two digit month of the article (folder path)       |                | Org: CREATED-time-stamp                                   |
| #ARTICLE-DAY#                      | two digit day of the article (folder path)         |                | Org: CREATED-time-stamp                                   |
| #ARTICLE-PUBLISHED-HTML-DATETIME#  | time-stamp of publishing in HTML                   |                | Org: CREATED-time-stamp                                   |
| #ARTICLE-PUBLISHED-HUMAN-READABLE# | time-stamp of publishing in                        |                | Org: CREATED-time-stamp                                   |
| #TAGNAME#                          | string of a tag                                    |                | Org: tags of Org-heading                                  |
| #SECTION-TITLE#                    | title of the next heading/section                  | x              | Org: heading of Org sub-heading                           |
| #SECTION-LEVEL#                    | relative level of the next heading/section         |                | Org: level of heading - level of article + 1              |
| #PAR-CONTENT#                      |                                                    | x              | Org: content which is not recognized as something special |
| #A-URL#                            | URL of a hyperlink                                 |                | Org: Org-link                                             |
| #CONTENT#                          | description of the hyperlink                       |                | Org: Org-link                                             |
| #CONTENT#                          | text of the list item                              | x              | Org: item content of Org list                             |
| #NAME#                             | Org-mode name of a block                           |                | Org: #+NAME: declaration                                  |


#+NAME: template-elements-besides-org-elements
| *What*                | *template-name*         | *placeholder replacements*                                            |
|-----------------------+-------------------------+-----------------------------------------------------------------------|
| article               | article-header          | ARTICLE-TITLE, ABOUT-BLOG, BLOGNAME, ARTICLE-(ID,YEAR,MONTH,DAY,PUB*) |
|                       | article-header-begin    | ARTICLE-TITLE, ABOUT-BLOG, BLOGNAME, ARTICLE-(ID,YEAR,MONTH,DAY,PUB*) |
|                       | article-header-end      | ARTICLE-TITLE, ABOUT-BLOG, BLOGNAME, ARTICLE-(ID,YEAR,MONTH,DAY,PUB*) |
|                       | article-tags-begin      |                                                                       |
|                       | article-usertag         | TAGNAME                                                               |
|                       | article-autotag         | TAGNAME                                                               |
|                       | article-tags-end        | ARTICLE-TITLE, ABOUT-BLOG, BLOGNAME, ARTICLE-(ID,YEAR,MONTH,DAY,PUB*) |
|                       | article-footer          | ARTICLE-TITLE, ABOUT-BLOG, BLOGNAME, ARTICLE-(ID,YEAR,MONTH,DAY,PUB*) |
|                       | article-end             | ARTICLE-TITLE, ABOUT-BLOG, BLOGNAME, ARTICLE-(ID,YEAR,MONTH,DAY,PUB*) |
|                       | persistent-header       | ARTICLE-TITLE, ABOUT-BLOG, BLOGNAME, ARTICLE-(ID,YEAR,MONTH,DAY,PUB*) |
|                       | persistent-header-begin | ARTICLE-TITLE, ABOUT-BLOG, BLOGNAME, ARTICLE-(ID,YEAR,MONTH,DAY,PUB*) |
|                       | persistent-header-end   | ARTICLE-TITLE, ABOUT-BLOG, BLOGNAME, ARTICLE-(ID,YEAR,MONTH,DAY,PUB*) |
|                       | persistent-footer       | ARTICLE-TITLE, ABOUT-BLOG, BLOGNAME, ARTICLE-(ID,YEAR,MONTH,DAY,PUB*) |
|                       | persistent-end          | ARTICLE-TITLE, ABOUT-BLOG, BLOGNAME, ARTICLE-(ID,YEAR,MONTH,DAY,PUB*) |
|-----------------------+-------------------------+-----------------------------------------------------------------------|
| headline              | section-begin           | SECTION-TITLE, SECTION-LEVEL                                          |
|-----------------------+-------------------------+-----------------------------------------------------------------------|
| paragraph, plain-text | paragraph               | PAR-CONTENT                                                           |
|-----------------------+-------------------------+-----------------------------------------------------------------------|
| URLs                  | a-href                  | A-URL, CONTENT                                                        |
|-----------------------+-------------------------+-----------------------------------------------------------------------|
| plain-list            | ul-begin                |                                                                       |
|                       | ul-item                 |                                                                       |
|                       | ul-end                  |                                                                       |
|-----------------------+-------------------------+-----------------------------------------------------------------------|
| pre-fromatted text    | pre-begin               |                                                                       |
|                       | pre-end                 |                                                                       |
|-----------------------+-------------------------+-----------------------------------------------------------------------|
| html-block            | html-begin              | NAME                                                                  |
|                       | html-end                |                                                                       |
| src-block             | src-begin               |                                                                       |
|                       | src-end                 |                                                                       |
|                       | named-src-begin         |                                                                       |
|                       | named-src-end           |                                                                       |



** Data Structures
*** Representation of blog data
CLOSED: [2013-08-20 Tue 18:15]
:PROPERTIES:
:CREATED:  [2013-05-21 Tue 15:26]
:ID: blog_data
:END:
:LOGBOOK:
- State "DONE"       from "STARTED"    [2013-08-20 Tue 18:15]
:END:

For a complete list of *content elements*, please take a look at
id:implemented-org-elements (above)

~blog_data~ is a Python list containing one dictionary entry per blog entry:

- FIXXME: add examples of:
  - category
  - other additional data

#+BEGIN_SRC python
  blog_data = \
  [ {'level': 2,                                                ## number of asterisks
     'title': u'This is a blog entry about foo',
     'usertags': [u'tag1', u'tag2'],
     'autotags': {'language': 'english'},
     'id': u'lazyblorg-example-entry',                          ## ID from PROPERTIES-drawer
     'finished-timestamp-history': [datetime1, datetime2, datetime3],
     'latestupdateTS': datetime,                                ## most current time-stamp that changed (or overwrote) heading to DONE
     'firstpublishTS': datetime,                                ## oldest time-stamp that changed heading to DONE
     'created': datetime,
     'content': [ ['par', u'This is the Org-mode content'],    ## 'par: paragraph containing anything that is not defined like tables, ...
                  '\n',    ## change of paragraph
                  ['heading', {'level': 3, 'title': u'Another aspect'}],
                  ['html-block', 'its name or None', [u'first line', u'second line', u'', u'last line']],
                  ['list-itemize', [u'first line', u'second line']],
                  ['table', u'followed by this table data'],         #FIXXME: table syntax
                  ['image', u'followed by this image']               #FIXXME: image syntax
                ]                                                    #FIXXME: further elements
  } ]
#+END_SRC

#+RESULTS:

Thus:
#+BEGIN_SRC python
blog_data[0].keys()
## ... results in:
# ['title',
#  'latestupdateTS',
#  'firstpublishTS',
#  'created',
#  'usertags',
#  'content',
#  'finished-timestamp-history',
#  'level',
#  'id']

blog_data[0]['content']  ## -> list of elements of content
# [['text', u'This is the Org-mode content'],
#  ['heading', {'level': 3, 'title': u'Another aspect'}],
#  ['list-itemize', [u'first line', u'second line']],
#  ['table', u'FIXXME: followed by this table data'],
#  ['image', u'FIXXME: followed by this image']]
#+END_SRC

*** Internal format of meta-data
:PROPERTIES:
:CREATED:  [2013-08-22 Thu 21:08]
:END:

Example:
#+BEGIN_EXAMPLE
>>> metadata
{u'2013-08-22-testid': {'title': u"This is the title", 'latestupdateTS': datetime.datetime(2013, 8, 22, 21, 6), 'firstpublishTS': datetime.datetime(2013, 8, 22, 21, 6), 'checksum': 'b757f8478bffd6c70a474f213d6520de', 'created': datetime.datetime(2013, 8, 22, 21, 6)},
 u'2013-02-12-lazyblorg-example-entry': {'latestupdateTS': datetime.datetime(2013, 2, 14, 19, 2), 'checksum': '24af2246a5121e829a0dbbd6e2425c15', 'created': datetime.datetime(2013, 2, 12, 10, 58)}}
#+END_EXAMPLE

Keys of the dict: IDs of the entries:
#+BEGIN_EXAMPLE
>>> metadata.keys()
[u'2013-08-22-testid', u'2013-02-12-lazyblorg-example-entry']
#+END_EXAMPLE

One entry with key=ID holds a dict with following entries:
- 'title': string containing the title of the blog entry
- 'latestupdateTS': datetime.datetime(2013, 8, 22, 21, 6)
  - most recent time-stamp from the LOGBOOK drawer which marked going
    to a final state
- 'checksum': 'b757f8478bffd6c70a474f213d6520de'
  - md5 check-sum of: [title, tags, finished_timestamp_history, content]
- 'created': datetime.datetime(2013, 8, 22, 21, 6)
  - datetime object of the CREATED property from the PROPERTY drawer
  - [ ] FIXXME: why not the first CLOSED time-stamp?

*** Time-stamps
:PROPERTIES:
:CREATED:  [2014-02-01 Sat 20:04]
:ID: 2014-02-01-time-stamps
:END:

Example:

: CLOSED: [2014-01-31 Fri 14:02]
: :LOGBOOK:
: - State "DONE"       from "DONE"       [2014-02-01 Sat 18:42]
: - State "DONE"       from ""           [2014-01-30 Thu 14:02]
: :END:
: :PROPERTIES:
: :CREATED:  [2014-01-28 Tue 14:02]
: :ID: 2014-01-27-lb-tests
: :END:

What happens with the various time-stamps?

- most recent LOGBOOK entry of setting to DONE:
  - added to entry['finished-timestamp-history'] (which is a list)
  - overwrites entry['latestupdateTS'] if is newer than the old one
    - entry['latestupdateTS'] is the most recent LOGBOOK entry of setting
      to DONE
  - overwrites entry['firstpublishTS'] if is older than the old one
- CREATED:
  - entry['created']
- CLOSED:
  - ignored
- ID-timestamp:
  - ignored

After parsing entry from above:

- entry['created'] = [2014-01-28 Tue 14:02]

- entry['latestupdateTS'] = [2014-02-01 Sat 18:42]
  - note that =entry['timestamp']= was renamed to =entry['latestupdateTS']= on 2017-02-12

- entry['firstpublishTS'] = [2014-01-30 Thu 14:02]
  - Oldest entry of entry['finished-timestamp-history'] is the *publication time-stamp*!

- entry['finished-timestamp-history'] = [2014-02-01 Sat 18:42] and
  [2014-01-30 Thu 14:02]

*** entries_timeline_by_published

The dict format is:
- dict with year (int) as key, value = list of 12 MONTH
- MONTH: list of 28-31 DAY
- DAY: list of 0 to many entry-IDs

#+BEGIN_SRC python
for year in sorted(entries_timeline_by_published.keys()):
    for month in enumerate(entries_timeline_by_published[year], start=0):
        # month = tuple(index, list of days)
        for day in enumerate(month[1], start=0):
            # day = tuple(index, list of IDs)
            for blogentry in day[1]:
                print str(year) + '-' + str(month[0]) + '-' + str(day[0]) + " has entry: " + str(blogentry)
#+END_SRC

see Utils.__add_entry_to_entries_timeline_by_published() how it is populated

see utils_test.py > test_entries_timeline_by_published_functions() how it's tested

** Development Schedule
:PROPERTIES:
:CREATED:  [2012-11-05 Mon 10:59]
:END:

this is the plan (from 2012-11):

- manually generate demo prototype
  - [X] very basic Org-mode example file containing everything from below
  - [X] HTML5 entry page
  - [X] CSS2 style
  - [X] HTML5 blog entry page
  - [X] Tag description pages
  - [X] feed
  - [X] HTML5 blog entry page with update
  - [ ] Index overview page (archive)
  - [X] description of basic work-flow for generating the blog
    - user point of view
    - system point of view
- refine and test design and features of prototype
  - ask for feedback
  - play around, break things
- development
  - [X] define order of Org-mode items (headings, lists, images, ...) implementation priority
  - [X] define even more basic (Org-mode, HTML) from above
  - [X] very basic unit-tests from prototype files (Org-mode, HTML)
  - [X] test and refine work-flow for (re-)generating the blog
  - [X] implement more and more Org-mode items

** Wishlist without compromises
:PROPERTIES:
:ID: 2012blogwishlist-copy
:CREATED:  [2013-01-07 Mon 18:40]
:END:

NOTE: if entries are marked as done in this section, they are not
implemented but moved to a (separate) user-story above.

- [X] Workflow to create a blog entry
  - make sure that there is an (uniq) :ID: property
  - add tag :blog: to heading
  - write content, subheadings, ...
  - change state of top-heading to DONE
  - (manually) invoke generation-script

- usage of only very basic markup
  - [X] paragraphs (p)
  - [X] headings (h1..n)
  - [X] http-references (a href)
  - [X] lists (ul)
  - [X] quote (verbatim)
  - [ ] images (img)
  - [X] tables
  - [X] inline-HTML
  - [X] internal links to other entries

- advantages
  - a blog entry can be located anywhere in all of my Orgmode files
  - no extra formatting steps
  - very small overhead to create a blog entry
  - no duplicate information
    - update only in Orgmode, not HTML or any in-between format
  - static (fast) pages
  - self-hosting without any fancy services behind like RDBS

- open issues
  - [X] comments
    - simplest form: generate unique Email link and add at bottom
      - very easy to be done for catch-all MTAs
      - automatically derive whitelist for MTA to avoid old spam
    - simple HTML form
      - POST to script, adding comment to my inbox.org (containing
        link to ID)
    - disqus: I do not want to outsource comment hosting :-(
  - [ ] how to include and format graphics?
    - sometimes, I e.g. want to have an image aligned right with text
      flowing around it
  - [-] probably: usage of in-between format like ikiwiki
    - Orgmode syntax -> ikiwiki markup (markdown?) -> usual
      ikiwiki-workflow
      - should be not much effort since prerequisites limit to few
        markup things
    - benefits from not having to re-implement many things
    - in-between-format HTML (like Manoj uses) is way too complicated
      causing misc potential error sources

- [ ] basic script workflow
  - find all headings with state DONE and tag :blog:
    - optionally: add all other tags starting with "blog-" as blog tags
  - one entry starts at such a heading until EOF OR same or less level
    heading is found
  - compare raw text and IDs with last run
    - known ID, raw text unchanged: ignore, no change
    - new ID
      - generate new blog entry
        - extract YYYY-MM-DD from LOGBOOK-drawer (first *->DONE transformation)
        - generate YYYY/MM/DD-folder structure in blog accordingly
        - generate sanitized blog title as file name
    - known ID, raw text differs
      - generate update of existing entry
        - add "(Update n)" (with n is the n-th update) to entry title
          - optionally: add this also to URL
            - disadvantage: broken old URLs
            - advantage: URL reflects update state
  - on any activity:
    - re-write feed for last n entries
    - optionally: generate overview page for last n entries
    - optionally: generate calendar archive page(s)
    - optionally: generate tag overview page(s)
  - on any error:
    - create an orgmode event from current time that appears on agenda
    - with daily repeat -> so it gets noticed on the next day(s) too
    - in the description of that entry:
      - babel-sh-snippet with prepared command to re-try the run :-)

** Original post (How this all started)

Copied from: http://article.gmane.org/gmane.emacs.orgmode/49747/
#+BEGIN_QUOTE
Hi!

I got a nice idea on how a very easy to use Org-mode blog system
should look like.

Currently, I am using Serendipidy with web-based editor to write
HTML. Org-mode enabled me to write blog entries and export it to
HTML. Then I paste the HTML and have to modify minor things (images,
...) a bit. I guess the time from finishing the Org-mode entry to
the final blog entry is approximately ten to twenty minutes.

Overall, I do not want to do this process when I just want to
quickly write a view paragraphs within a couple of minutes. I need
a workflow with much less annoying overhead.

Therefore I sat down and thought about a workflow that should be
enough for writing simple weblog entries:

  - create an Org-mode heading (anywhere!)
  - make sure that there is an (uniq) :ID: property
  - add the tag :blog: to heading
  - <write content, subheadings, ...>
  - change state of top-heading to DONE
    - this enables blog entries «in the queue»
  - (manually) invoke generation-script

This enables me quick blogging with a list of advantages:

  - a blog entry can be located anywhere in all of my Orgmode files
  - no extra formatting steps
  - very small (almost non-existent) overhead to create a blog entry
  - no duplicate information
    - updates only in Orgmode, not HTML or any in-between format
  - static (fast) pages
  - self-hosting without any fancy services behind like RDBS

What do you think of my ideas so far?

Of course, I looked into existing solutions and found those:

  - http://orgmode.org/worg/org-blog-wiki.html
    - cool overview page for various solutions
  - http://orgmode.org/worg/blorgit.html
    - pretty complex set up :-(
    - I do not need a web-interface to edit Org-mode files
    - seem to have «different» use cases
  - http://orgmode.org/worg/org-tutorials/org-jekyll.html
    - uses HTML as in-between format; seems to provide many error
      possibilities(?)
    - converting whole files only (not desired)
    - have to try it someday
  - http://emacs-fu.blogspot.com/2009/05/writing-and-blogging-with-org-mode.html
    - uses only HTML export
  - http://blog.herraiz.org/archives/241
    - uses only HTML export
  - https://github.com/chrismgray/ikiwiki-org-plugin
    - promising but only one part of a possible solution

So nothing offers the features and small footprint as my idea above
:-(

With some prerequisites, it should not be that hard to even
implement it by myself:

  - usage of only very basic markup
    - paragraphs (p)
    - headings (h1..n)
    - http-references (a href)
    - lists (ul)
    - images (img)
    - quote (verbatim)

Still there are some open issues:

  - comments
    - simplest form: generate unique Email link and add at bottom
      - very easy to be done for catch-all MTAs
      - automatically derive whitelist for MTA to avoid old spam
    - simple HTML form
      - POST to script, adding comment to my inbox.org (containing
        link to ID)
    - disqus: I do not want to outsource comment hosting :-(
  - how to include and format graphics?
    - sometimes, I e.g. want to have an image aligned right with text
      flowing around it
  - probably: usage of in-between format like ikiwiki
    - Orgmode syntax -> ikiwiki markup (markdown?) -> usual
      ikiwiki-workflow
      - should be not much effort since prerequisites limit to few
        markup things
    - benefits from not having to re-implement many things
    - in-between-format HTML (like Manoj uses) is way too complicated
      causing misc potential error sources

The basic script workflow is not that complicated:

  - find all headings with state DONE and tag :blog:
    - optionally: add all other tags starting with "blog-" as blog tags
  - one entry starts at such a heading until EOF OR same or less level
    heading is found
  - compare raw text and IDs with last run
    - known ID, raw text unchanged: ignore, no change
    - new ID
      - generate new blog entry
        - extract YYYY-MM-DD from LOGBOOK-drawer (first *->DONE transformation)
        - generate YYYY/MM/DD-folder structure in blog accordingly
        - generate sanitized blog title as file name
    - known ID, raw text differs
      - generate update of existing entry
        - add "(Update n)" (with n is the n-th update) to entry title
          - optionally: add this also to URL
            - disadvantage: broken old URLs
            - advantage: URL reflects update state
  - on any activity:
    - re-write feed for last n entries
    - optionally: generate overview page for last n entries
    - optionally: generate calendar archive page(s)
    - optionally: generate tag overview page(s)

#+END_QUOTE

** Other Org-mode parsers or Org-to-HTML blog methods
:PROPERTIES:
:CREATED:  [2014-02-25 Tue 19:41]
:END:

- http://orgmode.org/worg/org-blog-wiki.html
  - very good summary of all possible tools
    - Should I mention that lazyblorg beats them all? No, you're
      right - this is really obvious; silly me.
- http://orgmode.org/worg/org-web.html
  - list of web pages done with Org-mode

Some notes of stuff I was looking into as well:

- https://bazaar.launchpad.net/~washort/+junk/pyporgan/files/head:/pyporgan/
  - very clean
  - parses only structure -> very basic
- https://github.com/bjonnh/PyOrgMode
  - very basic

- http://atlanis.net/blog/posts/new-site-stasis.html
  - a description on how to use Stasis to generate HTML from Org-mode

- Org-mode > Octopress > Jekyll > HTML:
  - http://www.railsonmaui.com/blog/2014/03/05/octopress-setup-with-github-and-org-mode-v2/

- https://github.com/kelvinh/org-page
  - example set-up: http://cmacr.ae/blog/2015/01/18/org-page-blogging/

- https://github.com/renard/o-blog
  - using pandoc to convert markdown and Org-mode to HTML

* Local Variables                                                  :noexport:
# Local Variables:
# mode: auto-fill
# End:
